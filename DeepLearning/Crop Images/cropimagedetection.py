# -*- coding: utf-8 -*-
"""CropImageDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XZ9lWw9soxn5jOKDL0xiAYEzutGxU1fF
"""

import os, time
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import tensorflow as tf
from tensorflow import keras

categories = os.listdir("./crop_images")
print(categories)

img_size = (224, 224)

crop_images = keras.preprocessing.image_dataset_from_directory( # Imagenes normales
    "./crop_images",
    labels="inferred",
    label_mode="categorical",
    batch_size=32,
    image_size=img_size,
    shuffle=True
)

kag2 = keras.preprocessing.image_dataset_from_directory( # Augmented images
    "./kag2",
    labels="inferred",
    label_mode="categorical",
    batch_size=32,
    image_size=img_size,
    shuffle=True
)

test_crop_image = keras.preprocessing.image_dataset_from_directory( # Imagenes para el test
    "./test_crop_image",
    labels="inferred",
    label_mode="categorical",
    batch_size=32,
    image_size=img_size,
    shuffle=True
)

base_model = keras.applications.MobileNet( # Podemos probar MobileNetV2 o V3
    input_shape=(*img_size, 3),
    include_top=False,
    weights="imagenet"
)

base_model.trainable = False

model = keras.Sequential([ # Se puede cambiar la red nueronal
    base_model,
    keras.layers.Flatten(),
    keras.layers.Dense(64, activation="tanh"),
    keras.layers.Dense(32, activation="tanh"),
    keras.layers.Dense(16, activation="tanh"),
    keras.layers.Dense(len(categories), activation="softmax")
])

model.fit(kag2 + crop_images, batch_size=32, epochs=128, shuffle=True) # No se si el kag2 + crop_images este bien

model.evaluate(test_crop_image)